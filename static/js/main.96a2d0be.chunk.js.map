{"version":3,"sources":["static-data.js","reducers/index.js","reducers/user.js","reducers/contacts.js","reducers/activeUserId.js","constants/action-types.js","reducers/typing.js","reducers/messages.js","store/index.js","containers/User/User.js","action/index.js","components/Sidebar/Sidebar.js","components/Empty/Empty.js","components/Header/Header.js","containers/Chats/Chats.js","containers/MessageInput/MessageInput.js","containers/ChatWindow/ChatWindow.js","components/Main/Main.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["numberOfUsers","shortid","require","txtgen","faker","_","users","Array","from","length","generateUser","contacts","mapKeys","getMessages","messagesPerUser","messages","forEach","user","numberOfMsgs","user_id","v","i","number","text","sentence","is_user_msg","random","boolean","name","findName","email","internet","profile_pic","avatar","status","generate","combineReducers","state","activeUserId","action","type","payload","typing","message","userId","otherMessages","keys","pop","store","createStore","reducer","User","className","onClick","dispatch","bind","src","alt","Sidebar","map","contact","key","Empty","Header","Chat","Chats","props","scrollToBottom","chatsRef","current","scrollTop","scrollHeight","React","createRef","this","ref","msg","Component","MessageInput","value","onSubmit","e","preventDefault","getState","onChange","target","placeholder","ChatWindow","activeUser","activeMessages","values","Main","App","Boolean","window","location","hostname","match","render","console","log","ReactDOM","StrictMode","document","getElementById","subscribe","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.96a2d0be.chunk.js","sourcesContent":["const shortid = require(\"shortid\"); // shortid.generate() returns a unique \"short\" id\nconst txtgen = require(\"txtgen\"); // txtgen.sentence() returns random \"readable\" sentences\nconst faker = require(\"faker\"); // faker is used for generating random fake data.\nconst _ = require(\"lodash\"); // lodash is a utility lib for Javascript\n\nconst users = generateUsers(10);\n\n// Sample Objects:\n// contacts: {\n//   5LbqNTiTCq: {\n//     email: \"Trisha.Bauch@gmail.com\"\n//     name: \"Aiden Schultz\"\n//     profile_pic: \"https://s3.amazonaws.com/uifaces/faces/twitter/Stievius/128.jpg\"\n//     status: \"They were lost without the affable rat that composed their snail.\"\n//     user_id: \"5LbqNTiTCq\"\n//   }\n// }\n\nexport const contacts = _.mapKeys(users, \"user_id\");\nexport const getMessages = messagesPerUser => {\n  let messages = {};\n  _.forEach(users, user => {\n    messages[user.user_id] = {\n      ..._.mapKeys(generateMsgs(messagesPerUser), \"number\")\n    };\n  });\n  return messages;\n};\n\n// just an example of how the state object is structured\nexport const state = {\n  user: generateUser(),\n  messages: getMessages(10),\n  typing: \"\",\n  contacts,\n  activeUserId: null\n};\n\n/**\n * @returns {Object} - a new user object\n */\nexport function generateUser() {\n  return {\n    name: faker.name.findName(),\n    email: faker.internet.email(),\n    profile_pic: faker.internet.avatar(),\n    status: txtgen.sentence(),\n    user_id: shortid.generate()\n  };\n}\n/**\n * @returns {Object} - a new message object\n */\nfunction generateMsg(number) {\n  return {\n    number,\n    text: txtgen.sentence(),\n    is_user_msg: faker.random.boolean()\n  };\n}\n/**\n *\n * @param {Number} numberOfUsers - the number of users to be generated\n * @param {Function} generateUser - function that generates a single user\n * @returns {Array} - an array of user objects with length n = numberOfUsers\n */\nfunction generateUsers(numberOfUsers) {\n  return Array.from({ length: numberOfUsers }, () => generateUser());\n}\n\nfunction generateMsgs(numberOfMsgs) {\n  return Array.from({ length: numberOfMsgs }, (v, i) => generateMsg(i));\n}\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport contacts from './contacts';\nimport activeUserId from './activeUserId';\nimport messages from './messages';\nimport typing from './typing';\n\n// combineReducers takes in an object => shape is exactly like the state object of the application\n// NOTE: When using combineReducers, the value returned from each reducer is not the state of the application.\n// It is only the value of the particular key they represent in the state object!\n\nexport default combineReducers({\n  user,\n  contacts,\n  activeUserId,\n  typing,\n  messages\n});\n","import { generateUser } from '../static-data';\n\nexport default function (state = generateUser(), action) {\n  return state;\n};\n","import { contacts } from '../static-data';\n\n// initial state of the apps is handler by reducers instead of store\nexport default (state = contacts, action) => {\n  return state;\n};\n","import { SET_ACTIVE_USER_ID } from '../constants/action-types';\n\nexport default function activeUserId(state = null, action) {\n  switch (action.type) {\n    case SET_ACTIVE_USER_ID:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","export const SET_ACTIVE_USER_ID = 'SET_ACTIVE_USER_ID';\nexport const SET_TYPING_VALUE = 'SET_TYPING_VALUE';\nexport const SEND_MESSAGE = 'SEND_MESSAGE';\n","import { SET_TYPING_VALUE, SEND_MESSAGE } from '../constants/action-types';\n\nexport default function (state = '', action) {\n  switch (action.type) {\n    case SET_TYPING_VALUE:\n      return action.payload;\n    case SEND_MESSAGE:\n      return '';\n    default:\n      return state;\n  }\n};\n","import { getMessages } from '../static-data';\nimport { SEND_MESSAGE } from '../constants/action-types';\nimport _ from 'lodash';\n\nexport default function (state = getMessages(10), action) {\n  switch (action.type) {\n    case SEND_MESSAGE:\n      const { message, userId } = action.payload;\n      const otherMessages = state[userId];\n      // The + is to ensure that the result is converted to number\n      // instead of string\n      const number = +_.keys(otherMessages).pop() + 1;\n\n      return {\n        ...state,\n        [userId]: {\n          ...otherMessages,\n          [number]: {\n            number,\n            text: message,\n            is_user_msg: true\n          }\n        }\n      };\n    default:\n      return state;\n  }\n}\n","import { createStore } from 'redux';\nimport reducer from '../reducers';\n\nconst store = createStore(reducer);\n\nexport default store;\n","import React from 'react';\nimport './User.css';\nimport store from '../../store';\nimport { setActiveUserId } from '../../action';\n\nconst User = ({ user }) => {\n  const { name, profile_pic, status } = user;\n\n  function handleUserClick({ user_id }) {\n    store.dispatch(setActiveUserId(user_id));\n  }\n\n  return (\n    <div className='User' onClick={handleUserClick.bind(null, user)}>\n      <img src={profile_pic} alt={name} className=\"User__pic\"/>\n      <div className='User__details'>\n        <p className='User__details-name'>{name}</p>\n        <p className='User__details-status'>{status}</p>\n      </div>\n    </div>\n  )\n};\n\nexport default User;\n","import {\n  SET_ACTIVE_USER_ID,\n  SET_TYPING_VALUE,\n  SEND_MESSAGE\n} from '../constants/action-types';\n\nexport const setActiveUserId = activeUserId => (\n  {\n    type: SET_ACTIVE_USER_ID,\n    payload: activeUserId\n  }\n);\n\nexport const setTypingValue = text => (\n  {\n    type: SET_TYPING_VALUE,\n    payload: text\n  }\n);\n\nexport const sendMessage = (message, userId) => {\n  return {\n    type: SEND_MESSAGE,\n    payload: {\n      message,\n      userId\n    }\n  }\n};\n","import React from 'react';\nimport './Sidebar.css';\nimport User from '../../containers/User/User';\n\n// destructuring props to contacts\nconst Sidebar = ({ contacts }) => {\n  return (\n    <aside className='Sidebar'>\n      {\n        contacts.map(contact => {\n          return <User user={contact} key={contact.user_id}/>\n        })\n      }\n    </aside>\n  )\n};\n\nexport default Sidebar;\n","import React from 'react';\nimport './Empty.css'\n\nconst Empty = ({ user }) => {\n  const { name, profile_pic, status } = user;\n\n  return (\n    <div className='Empty'>\n      <h1 className='Empty__name'>Hello, {name}!</h1>\n      <img src={profile_pic} alt={name} className='Empty__img'/>\n      <p className='Empty__status'>\n        <b>Status: </b> {status}\n      </p>\n      <button className='Empty__btn'>Start a conversation</button>\n      <p className='Empty__info'>\n        Search for someone to start chatting with or go to Contacts to see who is available\n      </p>\n    </div>\n  )\n}\n\nexport default Empty;\n","import React from 'react';\nimport './Header.css';\n\nconst Header = ({ user }) => {\n  const { name, status } = user;\n\n  return (\n    <header className='Header'>\n      <h1 className='Header__name'>{name}</h1>\n      <p className='Header__status'>{status}</p>\n    </header>\n  )\n}\n\nexport default Header; ;\n","import React, { Component } from 'react';\nimport './Chats.css';\n\nconst Chat = ({ message }) => {\n  const { text, is_user_msg } = message;\n  return (\n    <span className={`Chat ${is_user_msg ? 'is-user-msg' : ''}`}>{text}</span>\n  )\n}\n\nclass Chats extends Component {\n  constructor(props) {\n    super(props);\n    // React.createRef is used to interact with the DOM in a React application.\n    // https://blog.logrocket.com/how-to-use-react-createref-ea014ad09dba/\n    this.chatsRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.scrollToBottom();\n  }\n\n  componentDidUpdate () {\n    this.scrollToBottom();\n  }\n\n  scrollToBottom = () => {\n    // scrollheight => the entire height of the element\n    // scrollTop => number of pixels the content of a <div> element is scrolled vertically\n    this.chatsRef.current.scrollTop = this.chatsRef.current.scrollHeight;\n  }\n\n  render() {\n    return (\n      <div className='Chats' ref={this.chatsRef}>\n        {\n          this.props.messages.map(msg => (\n            <Chat message={msg} key={msg.number}/>\n          ))\n        }\n      </div>\n    )\n  }\n}\n\nexport default Chats;\n","import React from 'react';\nimport store from '../../store';\nimport { setTypingValue, sendMessage } from '../../action';\nimport './MessageInput.css';\n\nconst MessageInput = ({ value }) => {\n  function handleChange (e) {\n    store.dispatch(setTypingValue(e.target.value));\n  };\n\n  function handleSubmit (e) {\n    e.preventDefault();\n    const { typing, activeUserId } = store.getState();\n    store.dispatch(sendMessage(typing, activeUserId));\n  }\n\n  return (\n    <form className='Message' onSubmit={handleSubmit}>\n      <input\n        className='Message__input'\n        onChange={handleChange}\n        value={value}\n        placeholder='Write something here...'\n      />\n    </form>\n  );\n};\n\nexport default MessageInput;\n","import React from 'react';\nimport Header from '../../components/Header/Header';\nimport store from '../../store';\nimport Chats from '../Chats/Chats';\nimport MessageInput from '../MessageInput/MessageInput';\nimport './ChatWindow.css';\nimport _ from 'lodash';\n\nconst ChatWindow = ({ activeUserId }) => {\n  const state = store.getState();\n  const { typing } = state;\n  const activeUser = state.contacts[activeUserId];\n  const activeMessages = state.messages[activeUserId];\n\n  return (\n    <div className='ChatWindow'>\n      <Header user={activeUser}/>\n      <Chats messages={_.values(activeMessages)}/>\n      <MessageInput value={typing}/>\n    </div>\n  )\n}\n\nexport default ChatWindow;\n","import React from 'react';\nimport './Main.css';\nimport Empty from '../Empty/Empty';\nimport ChatWindow from '../../containers/ChatWindow/ChatWindow';\n\nconst Main = ({ user, activeUserId }) => {\n  const renderMainContent = () => {\n    return activeUserId ? <ChatWindow activeUserId={activeUserId}/> :\n      <Empty user={user} activeUserId={activeUserId}/>;\n  }\n\n  return <main className='Main'>{renderMainContent()}</main>\n};\n\nexport default Main;\n","import React from 'react';\nimport Sidebar from '../../components/Sidebar/Sidebar';\nimport Main from '../../components/Main/Main';\nimport './App.css';\nimport store from '../../store';\nimport _ from 'lodash';\n\nconst App = () => {\n  const { contacts, user, activeUserId } = store.getState();\n\n  return (\n    <div className='App'>\n      <Sidebar contacts={_.values(contacts)}/>\n      <Main user={user} activeUserId={activeUserId}/>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport store from './store';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nfunction fancyLog() {\n  console.log(\"%c Rendered with ? ??\", \"background: purple; color: #FFF\");\n  console.log(store.getState());\n}\n\nconst render = () => {\n  fancyLog();\n  return (\n    ReactDOM.render(\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>,\n      document.getElementById('root')\n    )\n  )\n}\n\nrender();\n\nstore.subscribe(render);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}